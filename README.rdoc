= Harvestdor

A Gem to harvest metadata from DOR.

== Installation

Add this line to your application's Gemfile:

    gem 'harvestdor'

And then execute:

    $ bundle

Or install it yourself as:

    $ gem install harvestdor

== Usage

=== Configuration

==== Option 1:  use a yaml file

for contents of yml --  see spec/config/oai.yml

  client = Harvestdor::Client.new({:config_yml_path => path_to_my_yml})
  client.druids_via_oai do |druid|
    # do stuff with the druid, e.g. 
    #  cm = client.content_metadata(druid)
    #  mods = client.mods(druid)
    #  create solr doc from mods and cm
    #  write solr doc to your app's index
  end

==== Option 2:  pass in non-default configurations as a hash

  client = Harvestdor::Client.new({:oai_repository_url => 'http://my_oai.org, :default_from_date => '2012-12-01'})
  client.druids_via_oai do |druid|
    # do stuff with the druid, e.g. 
    #  cm = client.content_metadata(druid)
    #  mods = client.mods(druid)
    #  create solr doc from mods and cm
    #  write solr doc to your app's index
  end

==== Option 3:  set the attributes explicitly in your code

  client = Harvestdor::Client.new
  client.config.oai_repository_url = 'http://my_oai.org'
  client.oai_records do |rec|
    # do stuff with the OAI rec, e.g.
    #  manipulate metadata into solr doc
    #  manipulate stuff from record.about into solr doc
    #  write solr doc to your app's index
  end

==== Option 4:  set the OAI parameters as params in call to Harvestdor::Client.harvest_xx

  client = Harvestdor.new({oai_repository_url = 'http://my_oai.org'})
  client.oai_headers(:metadataPrefix => 'foo', :from => '2012-11-27', :set => 'isGovernedBy:hy787xj5878') do | id |
    # do stuff with the druid
  end

=== OAI Harvesting

  Harvestdor::Client.druids_via_oai  gets enumerated druids for the records in your specified set / date range  (druids are not preceded by 'druid:')

  Harvestdor::Client.oai_records  gets enumerated OAI record objects in your specified set / data range, with the metadata format you indicated

You can also get these as arrays:

  druid_array = client.druids_via_oai(:metadataPrefix => 'foo', :from => '(last_harvested_date)', :set => 'asdfasdf')

=== XML from PURL pages

You can get, for example, the contentMetadata for a druid:

  it "#content_metadata retrieves contentMetadata as a Nokogiri::XML::Document" do
    cm = Harvestdor.content_metadata('bb375wb8869', 'http://purl-test.stanford.edu')
    cm.should be_kind_of(Nokogiri::XML::Document)
    cm.root.name.should == 'contentMetadata'
    cm.root.attributes['objectId'].text.should == @druid
  end

Or the MODS metadata:

  it "#mods returns a Nokogiri::XML::Document from the purl mods" do
    x = Harvestdor.mods('bb375wb8869', 'http://purl-test.stanford.edu')
    x.should be_kind_of(Nokogiri::XML::Document)
    x.root.name.should == 'mods'
    x.root.namespace.href.should == Harvestdor::MODS_NAMESPACE
  end

Similarly for
# mods
# public_xml  (all of it)
# content_metadata
# identity_metadata
# rights_metadata
# rdf
# dc

You can also do this from a Harvestdor::Client object, and it will use the purl from the Client.config:

  client = Harvestdor::Client.new({:purl_url => 'http://thisone.org'})
  client.identity_metadata('bb375wb8869')


=== TODO: Last Harvested Datestamp (Incremental Harvests)

Harvestdor::Client.last_datestamp

persist this information with your app for incremental harvests


== Contributing

# Fork it
# Create your feature branch (`git checkout -b my-new-feature`)
# Write code and tests.
# Commit your changes (`git commit -am 'Added some feature'`)
# Push to the branch (`git push origin my-new-feature`)
# Create new Pull Request

== Releases

* <b>0.0.9</b> allows public xml to be passed as Nokogiri::XML::Document to content_metadata, etc. to avoid unnec fetching
* <b>0.0.8</b> avoid undefined method 'size' from scrub_oai_args when using a non-nil default date param
* <b>0.0.7</b> add oai client timeout overrides, update README
* <b>0.0.6</b> refactoring oai_harvest for greater simplicity and passing errors through, add oai_record (get_record OAI request)
* <b>0.0.5</b> don't send empty string arguments to OAI server so you can get actual results
* <b>0.0.4</b> add integration spec and get it working with actual OAI server
* <b>0.0.3</b> add method to get mods from purl
* <b>0.0.2</b> tidy up README
* <b>0.0.1</b> initial commit
